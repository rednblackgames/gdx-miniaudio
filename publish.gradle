apply plugin: 'maven-publish'
apply plugin: 'signing'

ext.artifact = 'miniaudio'
ext.packaging = 'jar'

def isDevBuild
def isCiBuild
def isReleaseBuild

def sonatypeRepositoryUrl

//set build variables based on build type (release, continuous integration, development)
if(hasProperty("RELEASE")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
    println "Performing release build"
} else if (hasProperty("SNAPSHOT")) {
    isCiBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://central.sonatype.com/repository/maven-snapshots/"
    println "Performing snapshot build"
} else {
    version += "-LOCAL"
    isDevBuild = true
    println "Performing local build"
}

def getRepositoryUsername = {
    return project.hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : "$System.env.NEXUS_USERNAME"
}

def getRepositoryPassword = {
    return project.hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : "$System.env.NEXUS_PASSWORD"
}

repositories {
    mavenCentral()
}

if(isReleaseBuild) {
    signing {
        useGpgCmd()
        sign publishing.publications
    }
} else {
    task signArchives {
        // do nothing
    }
}

artifacts {
    def packageTasks = [
            tasks.named("jnigenPackageAllAndroid"),
            tasks.named("jnigenPackageAllIOS"),
            tasks.named("jnigenPackageAllDesktop")
    ]

    packageTasks.each { packageTask ->
        packageTask.get().outputs.files.each { file ->
            archives(file) {
                builtBy packageTask
            }
        }
    }
}

def configurePom = { pom ->
    pom.with {
        name = "MiniAudio extension for libGDX"
        description = "Advanced Audio Engine for libGDX based on MiniAudio"
        url = "https://github.com/rednblackgames/gdx-miniaudio"
        licenses {
            license {
                name = "The Apache Software License, Version 2.0"
                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution = "repo"
            }
        }
        developers {
            developer {
                id = "fgnm"
                name = "Francesco Marongiu"
                email = "fgnm.dev@gmail.com"
            }
        }
        scm {
            connection = "scm:git@github.com:rednblackgames/gdx-miniaudio.git"
            developerConnection = "scm:git@github.com:rednblackgames/gdx-miniaudio.git"
            url = "scm:git@github.com:rednblackgames/gdx-miniaudio.git"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            artifactId = artifact
            pom(configurePom)
        }

        matching { it.name == 'jniPlatform' }.configureEach {
            if (it instanceof MavenPublication) {
                it.pom(configurePom)
            }
        }
    }

    repositories {
        maven {
            url = sonatypeRepositoryUrl

            if (getRepositoryUsername() || getRepositoryPassword())
            {
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }
}